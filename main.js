// Generated by Haxe 3.3.0 (git build development @ b0a6270)
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ErrorCodes = function() { };
var JsonRpc = function() { };
JsonRpc.cancel = function(id) {
	return { jsonrpc : "2.0", method : "$/cancelRequest", params : { id : id}};
};
var Main = function() { };
Main.main = function() {
	var proto = new Protocol();
	proto.onInitialize = function(params,cancel,resolve,reject) {
		resolve({ capabilities : { completionProvider : { resolveProvider : true, triggerCharacters : [".","("]}}});
	};
	proto.onCompletion = function(params1,cancel1,resolve1,reject1) {
		proto.sendShowMessage({ type : 3, message : "Hello"});
		resolve1([{ label : "foo"},{ label : "bar"}]);
	};
	proto.onCompletionItemResolve = function(item,cancel2,resolve2,reject2) {
		resolve2(item);
	};
};
var Protocol = function() {
};
Protocol.prototype = {
	handleMessage: function(message) {
		if(Object.prototype.hasOwnProperty.call(message,"id")) {
			this.handleRequest(message);
		} else {
			this.handleNotification(message);
		}
	}
	,handleRequest: function(request) {
		switch(request.method) {
		case "codeLens/resolve":
			this.onCodeLensResolve(request.params,null,null,null);
			break;
		case "completionItem/resolve":
			this.onCompletionItemResolve(request.params,null,null,null);
			break;
		case "initialize":
			this.onInitialize(request.params,null,null,null);
			break;
		case "textDocument/codeAction":
			this.onCodeAction(request.params,null,null,null);
			break;
		case "textDocument/codeLens":
			this.onCodeLens(request.params,null,null,null);
			break;
		case "textDocument/completion":
			this.onCompletion(request.params,null,null,null);
			break;
		case "textDocument/definition":
			this.onGotoDefinition(request.params,null,null,null);
			break;
		case "textDocument/documentHighlight":
			this.onDocumentHighlights(request.params,null,null,null);
			break;
		case "textDocument/documentSymbol":
			this.onDocumentSymbols(request.params,null,null,null);
			break;
		case "textDocument/formatting":
			this.onDocumentFormatting(request.params,null,null,null);
			break;
		case "textDocument/hover":
			this.onHover(request.params,null,null,null);
			break;
		case "textDocument/onTypeFormatting":
			this.onDocumentOnTypeFormatting(request.params,null,null,null);
			break;
		case "textDocument/references":
			this.onFindReferences(request.params,null,null,null);
			break;
		case "textDocument/rename":
			this.onRename(request.params,null,null,null);
			break;
		case "textDocument/signatureHelp":
			this.onSignatureHelp(request.params,null,null,null);
			break;
		case "workspace/symbol":
			this.onWorkspaceSymbols(request.params,null,null,null);
			break;
		default:
			throw new js__$Boot_HaxeError("TODO: dispatch MethodNotFound");
		}
	}
	,handleNotification: function(notification) {
		switch(notification.method) {
		case "exit":
			this.onExit();
			break;
		case "shutdown":
			this.onShutdown();
			break;
		case "textDocument/didChange":
			this.onDidChangeTextDocument(notification.params);
			break;
		case "textDocument/didClose":
			this.onDidCloseTextDocument(notification.params);
			break;
		case "textDocument/didOpen":
			this.onDidOpenTextDocument(notification.params);
			break;
		case "textDocument/didSave":
			this.onDidSaveTextDocument(notification.params);
			break;
		case "textDocument/publishDiagnostics":
			this.onPublishDiagnostics(notification.params);
			break;
		case "window/logMessage":
			this.onLogMessage(notification.params);
			break;
		case "window/showMessage":
			this.onShowMessage(notification.params);
			break;
		case "workspace/didChangeConfiguration":
			this.onDidChangeConfiguration(notification.params);
			break;
		case "workspace/didChangeWatchedFiles":
			this.onDidChangeWatchedFiles(notification.params);
			break;
		default:
			throw new js__$Boot_HaxeError("TODO: dispatch MethodNotFound");
		}
	}
	,onInitialize: function(params,cancel,resolve,reject) {
	}
	,sendShutdown: function(params) {
	}
	,onShutdown: function() {
	}
	,sendExit: function(params) {
	}
	,onExit: function() {
	}
	,sendShowMessage: function(params) {
	}
	,onShowMessage: function(params) {
	}
	,sendLogMessage: function(params) {
	}
	,onLogMessage: function(params) {
	}
	,sendDidChangeConfiguration: function(params) {
	}
	,onDidChangeConfiguration: function(params) {
	}
	,sendDidOpenTextDocument: function(params) {
	}
	,onDidOpenTextDocument: function(params) {
	}
	,sendDidChangeTextDocument: function(params) {
	}
	,onDidChangeTextDocument: function(params) {
	}
	,sendDidCloseTextDocument: function(params) {
	}
	,onDidCloseTextDocument: function(params) {
	}
	,sendDidSaveTextDocument: function(params) {
	}
	,onDidSaveTextDocument: function(params) {
	}
	,sendDidChangeWatchedFiles: function(params) {
	}
	,onDidChangeWatchedFiles: function(params) {
	}
	,sendPublishDiagnostics: function(params) {
	}
	,onPublishDiagnostics: function(params) {
	}
	,onCompletion: function(params,cancel,resolve,reject) {
	}
	,onCompletionItemResolve: function(params,cancel,resolve,reject) {
	}
	,onHover: function(params,cancel,resolve,reject) {
	}
	,onSignatureHelp: function(params,cancel,resolve,reject) {
	}
	,onGotoDefinition: function(params,cancel,resolve,reject) {
	}
	,onFindReferences: function(params,cancel,resolve,reject) {
	}
	,onDocumentHighlights: function(params,cancel,resolve,reject) {
	}
	,onDocumentSymbols: function(params,cancel,resolve,reject) {
	}
	,onWorkspaceSymbols: function(params,cancel,resolve,reject) {
	}
	,onCodeAction: function(params,cancel,resolve,reject) {
	}
	,onCodeLens: function(params,cancel,resolve,reject) {
	}
	,onCodeLensResolve: function(params,cancel,resolve,reject) {
	}
	,onDocumentFormatting: function(params,cancel,resolve,reject) {
	}
	,onDocumentOnTypeFormatting: function(params,cancel,resolve,reject) {
	}
	,onRename: function(params,cancel,resolve,reject) {
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
ErrorCodes.ParseError = -32700;
ErrorCodes.InvalidRequest = -32600;
ErrorCodes.MethodNotFound = -32601;
ErrorCodes.InvalidParams = -32602;
ErrorCodes.InternalError = -32603;
ErrorCodes.serverErrorStart = -32099;
ErrorCodes.serverErrorEnd = -32000;
JsonRpc.PROTOCOL_VERSION = "2.0";
Main.main();
})();
